[
    {
        "id": "d8fa57a5ef9491a4",
        "type": "tab",
        "label": "Connector",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "2d94b6f010474707",
        "type": "Stackhero-InfluxDB-v2-Server",
        "name": "",
        "host": "eu-central-1-1.aws.cloud2.influxdata.com",
        "port": "443",
        "tls": true
    },
    {
        "id": "bfe8a18b184b8951",
        "type": "telegram bot",
        "botname": "https://t.me/RPI4_Lab_bot",
        "usernames": "",
        "chatids": "",
        "baseapiurl": "",
        "updatemode": "polling",
        "pollinterval": "300",
        "usesocks": false,
        "sockshost": "",
        "socksprotocol": "socks5",
        "socksport": "6667",
        "socksusername": "anonymous",
        "sockspassword": "",
        "bothost": "",
        "botpath": "",
        "localbotport": "8443",
        "publicbotport": "8443",
        "privatekey": "",
        "certificate": "",
        "useselfsignedcertificate": false,
        "sslterminated": false,
        "verboselogging": false
    },
    {
        "id": "fcb39804f01887c9",
        "type": "s7 endpoint",
        "transport": "iso-on-tcp",
        "address": "127.0.0.1",
        "port": "102",
        "rack": "0",
        "slot": "1",
        "localtsaphi": "01",
        "localtsaplo": "00",
        "remotetsaphi": "01",
        "remotetsaplo": "00",
        "connmode": "rack-slot",
        "adapter": "",
        "busaddr": "2",
        "cycletime": "60000",
        "timeout": "2000",
        "name": "",
        "vartable": [
            {
                "addr": "DB2,R56",
                "name": "InputFEGaz"
            },
            {
                "addr": "DB2,R68",
                "name": "InputFEWater"
            },
            {
                "addr": "DB2,R4",
                "name": "InputTESteam"
            },
            {
                "addr": "DB2,R10",
                "name": "InputTESmoke"
            },
            {
                "addr": "DB2,R62",
                "name": "InputFESteam"
            }
        ]
    },
    {
        "id": "48659a7502deef5d",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "database",
        "name": "",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "https://eu-central-1-1.aws.cloud2.influxdata.com/",
        "rejectUnauthorized": true
    },
    {
        "id": "2ff2a476.a6d2ec",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "database",
        "name": "test 1.8 flux",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "1.8-flux",
        "url": "https://localhost:8086",
        "rejectUnauthorized": false
    },
    {
        "id": "6ca8bde.9eb2f44",
        "type": "influxdb",
        "hostname": "localhost",
        "port": "8086",
        "protocol": "https",
        "database": "new_db",
        "name": "",
        "usetls": true,
        "tls": "",
        "influxdbVersion": "1.x"
    },
    {
        "id": "1b645d3a82da0d5f",
        "type": "modbustcp-server",
        "name": "PLCSIM",
        "host": "127.0.0.1",
        "port": "502",
        "unit_id": "1",
        "reconnecttimeout": "1000"
    },
    {
        "id": "b8bf539fa6572564",
        "type": "change",
        "z": "d8fa57a5ef9491a4",
        "name": "set1",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"number\": 53}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 390,
        "y": 840,
        "wires": [
            [
                "58297739fecc8006"
            ]
        ]
    },
    {
        "id": "77b8d323542bb50a",
        "type": "http in",
        "z": "d8fa57a5ef9491a4",
        "name": "",
        "url": "/test",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 400,
        "y": 920,
        "wires": [
            []
        ]
    },
    {
        "id": "58297739fecc8006",
        "type": "json",
        "z": "d8fa57a5ef9491a4",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 530,
        "y": 840,
        "wires": [
            []
        ]
    },
    {
        "id": "6224d907efd62873",
        "type": "function",
        "z": "d8fa57a5ef9491a4",
        "name": "Економічні розрахунки",
        "func": "// Отримати глобальний контекст\nvar globalContext = global.get('globalContext') || {};\n//розрахунок вартості 1 МДж  енергії\nconst Cf = globalContext.data.Cf\nconst Hf = globalContext.data.Hf // калорійність палива (Газ)\nconst KKD = globalContext.result1.KKD\nlet Ce = (100 * Cf)/(Hf*KKD)\n//розрахунок вартості виготовлення 1т пари\nconst Hs = globalContext.data.Hs //Ентальпія пари при тиску 1400кПа\nconst Hfw = globalContext.data.Hfw //Ентальпія живильної води\nlet Cs = Ce * (Hs - Hfw)\nif (Ce <= 0) {\n    Ce = 0\n}\nif (Cs <= 0) {\n    Cs = 0\n}\n\nmsg.payload = {\n    Ce: Ce,\n    Cs: Cs\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1330,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "d93533fe2be968d3",
        "type": "http response",
        "z": "d8fa57a5ef9491a4",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 730,
        "y": 900,
        "wires": []
    },
    {
        "id": "7432f6a9c1642e13",
        "type": "s7 in",
        "z": "d8fa57a5ef9491a4",
        "endpoint": "fcb39804f01887c9",
        "mode": "all",
        "variable": "GAZ",
        "diff": true,
        "name": "S7-1500",
        "x": 120,
        "y": 80,
        "wires": [
            [
                "85ad884c8e90b835"
            ]
        ]
    },
    {
        "id": "db981e484a7ab8c0",
        "type": "debug",
        "z": "d8fa57a5ef9491a4",
        "name": "debug 37",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1880,
        "y": 80,
        "wires": []
    },
    {
        "id": "85ad884c8e90b835",
        "type": "function",
        "z": "d8fa57a5ef9491a4",
        "name": "Отримання початкових значень та значень з контроллера",
        "func": "// Отримати значення з msg.payload\nmsg.toFix = {\n    InputFEGaz: msg.payload.InputFEGaz,\n    InputFEWater: parseFloat(msg.payload.InputFEWater.toFixed(1)) ,\n    InputTESteam: msg.payload.InputTESteam,\n    InputTESmoke: msg.payload.InputTESmoke,\n    InputFESteam: parseFloat(msg.payload.InputFESteam.toFixed(1)) ,\n}\nmsg.input = { \n    ...msg.toFix,\n    Hw: 858, //ентальпія води в стані насичення (1600кПа)\n    DeltH: 1946, //Прихована теплота пароутворення,\n    Hfw: 506, // ентальпія живильної води (100 градусів)\n    Hf: 33500, // теплота згоряння Газу в кДж/м3\n    MfwMax: 50000, // максимальна витрата живильної води\n    Cf: 17.6, //вартість газу 01.2023\n    Hs: 2928, // ентальпія пара при тиску 1400кПа\n    TEWaterInput: 100, // температура води на вході в котел\n    QGaz: 9.3, //теплота згоряння Газу в кВт/м3\n    C: 0.00066853 //теплоємність перегрітої пари (1600кПа) кВт/кг * 0C\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 80,
        "wires": [
            [
                "18cb8c3c3b542f20"
            ]
        ]
    },
    {
        "id": "0a118cb0b93709f8",
        "type": "change",
        "z": "d8fa57a5ef9491a4",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "globalContext.GAZ",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 600,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "d82fb9c5a7f6affe",
        "type": "function",
        "z": "d8fa57a5ef9491a4",
        "name": "Обчислення ККД та Навантаження",
        "func": "// Отримати глобальний контекст\nvar globalContext = global.get('globalContext') || {};\n// Розрахунок ККД\nconst Mfw = globalContext.input.InputFEWater * 1000 //витрата живильної води \nconst Hw = globalContext.data.Hw //ентальпія води в стані насичення (1600кПа)\nconst DeltH = globalContext.data.DeltH //Прихована теплота пароутворення\nconst Hfw = globalContext.data.Hfw // ентальпія живильної води (100 градусів)\nconst Mfl = globalContext.input.InputFEGaz //витрата палива\nconst Hf = globalContext.data.Hf // калорійність палива (Газ)\nlet KKD = parseFloat(((Mfw* (Hw+0.98*DeltH-Hfw))/(Mfl*Hf) *100).toFixed(2))\n// Розрахунок навантаження\nconst MfwMax = globalContext.data.MfwMax // максимальна витрата живильноъ води\nlet LF = parseFloat((100 * (Mfw / MfwMax)).toFixed(2))\nif (LF >=100) {\n    LF = 100\n}\nif (KKD >= 100 ) {\n    KKD = 100\n}\n\nmsg.payload ={\n    KKD : KKD,\n    LF : LF\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1370,
        "y": 1000,
        "wires": [
            []
        ]
    },
    {
        "id": "17ef2db38db35816",
        "type": "function",
        "z": "d8fa57a5ef9491a4",
        "name": "Send",
        "func": "\n// Оновити значення msg.payload на об'єкт JSON\nmsg.payload = msg.data;\n// Повернути об'єкт msg для подальшого використання в потоці\n// Створити об'єкт JSON\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1590,
        "y": 860,
        "wires": [
            [
                "543f49b9eef1bd18",
                "cad07f3ad8ef73d7"
            ]
        ]
    },
    {
        "id": "286763d93b737c08",
        "type": "function",
        "z": "d8fa57a5ef9491a4",
        "name": "Data",
        "func": "msg.data = {\n    Hw : 858, //ентальпія води в стані насичення (1600кПа)\n    DeltH : 1946, //Прихована теплота пароутворення,\n    Hfw : 506, // ентальпія живильної води (100 градусів)\n    Hf : 35400, // калорійність палива (Газ)\n    MfwMax : 50000, // максимальна витрата живильної води\n    Cf : 17.6, //вартість газу 01.2023\n    Hs : 2928, // ентальпія пара при тиску 1400кПа\n    TEWaterInput : 100 // температура води на вході в котел\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1270,
        "y": 960,
        "wires": [
            []
        ]
    },
    {
        "id": "22c2970e282e64f6",
        "type": "function",
        "z": "d8fa57a5ef9491a4",
        "name": "Забпис даних в глобальний контекст",
        "func": "// Отримати значення з msg.payload\nvar value = msg.data;\n// Отримати глобальний контекст\nvar globalContext = global.get('globalContext') || {};\n// Зберегти значення в глобальному контексті\nglobalContext.data = value;\n// Оновити глобальний контекст\nglobal.set('globalContext', globalContext);\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1750,
        "y": 1060,
        "wires": [
            []
        ]
    },
    {
        "id": "16a3a2f7d5e7d925",
        "type": "function",
        "z": "d8fa57a5ef9491a4",
        "name": "Забпис даних в глобальний контекст",
        "func": "// Отримати значення з msg.payload\nvar value = msg.payload;\n// Отримати глобальний контекст\nvar globalContext = global.get('globalContext') || {};\n// Зберегти значення в глобальному контексті\nglobalContext.result1 = value;\n// Оновити глобальний контекст\nglobal.set('globalContext', globalContext);\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1750,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "a44201866abb4059",
        "type": "http in",
        "z": "d8fa57a5ef9491a4",
        "name": "",
        "url": "/test",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 1420,
        "y": 860,
        "wires": [
            []
        ]
    },
    {
        "id": "543f49b9eef1bd18",
        "type": "http response",
        "z": "d8fa57a5ef9491a4",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1790,
        "y": 860,
        "wires": []
    },
    {
        "id": "cad07f3ad8ef73d7",
        "type": "debug",
        "z": "d8fa57a5ef9491a4",
        "name": "debug 39",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1780,
        "y": 900,
        "wires": []
    },
    {
        "id": "43cc21f0e571c528",
        "type": "function",
        "z": "d8fa57a5ef9491a4",
        "name": "Потужність котла",
        "func": "// Отримати глобальний контекст\nvar globalContext = global.get('globalContext') || {};\n//Потужність котла МВт\nconst T2 = globalContext.input.InputTESteam // Температура виходу (пари)\nconst T1 = globalContext.data.TEWaterInput // Температура входу )води на вході\nconst FEWater = globalContext.input.InputFEWater// Витрата води\nlet Q = parseFloat((((T2 - T1) * FEWater) / 1000 * 1.16).toFixed(3)) // Формула рограхунку потужності (якщо прибрати множення на 1.16 то результат буде в ГКал)\nmsg.payload = {\n    Q: Q\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1310,
        "y": 1080,
        "wires": [
            []
        ]
    },
    {
        "id": "18cb8c3c3b542f20",
        "type": "function",
        "z": "d8fa57a5ef9491a4",
        "name": "Обчислення ККД та Навантаження",
        "func": "// Розрахунок ККД\nconst Mfw = msg.input.InputFEWater * 1000 //витрата живильної води \nconst Hw = msg.input.Hw //ентальпія води в стані насичення (1600кПа)\nconst DeltH = msg.input.DeltH //Прихована теплота пароутворення\nconst Hfw = msg.input.Hfw // ентальпія живильної води (100 градусів)\nconst Mfl = msg.input.InputFEGaz //витрата палива\nconst Hf = msg.input.Hf // калорійність палива (Газ)\nlet KKD = parseFloat(((Mfw* (Hw+0.98*DeltH-Hfw))/(Mfl*Hf) *100).toFixed(2))\n// Розрахунок навантаження\nconst MfwMax = msg.input.MfwMax // максимальна витрата живильноъ води\nlet LF = parseFloat((100 * (Mfw / MfwMax)).toFixed(2))\nif (LF >=100) {\n    LF = 100\n}\nif (KKD >= 100 ) {\n    KKD = 100\n}\nmsg.result1 ={\n    KKD : KKD,\n    LoadSteamBoiller : LF\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 80,
        "wires": [
            [
                "a5eccda30780fb92",
                "4df853c91f192aa4",
                "c0efd85bb53d7b50"
            ]
        ]
    },
    {
        "id": "a5eccda30780fb92",
        "type": "function",
        "z": "d8fa57a5ef9491a4",
        "name": "Економічні розрахунки",
        "func": "//розрахунок вартості 1 МДж  енергії\nconst Cf = msg.input.Cf\nconst Hf = msg.input.Hf // калорійність палива (Газ)\nconst KKD = msg.result1.KKD\nlet Ce = parseFloat(((100 * Cf)/(Hf*KKD)).toFixed(5))\n//розрахунок вартості виготовлення 1т пари\nconst Hs = msg.input.Hs //Ентальпія пари при тиску 1400кПа\nconst Hfw = msg.input.Hfw //Ентальпія живильної води\nlet Cs = parseFloat((Ce * (Hs - Hfw)).toFixed(2))\nif (Ce <= 0) {\n    Ce = 0\n}\nif (Cs <= 0) {\n    Cs = 0\n}\nmsg.result3 = {\n    Cost1MDj: Ce,\n    Cost1Ton: Cs\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 80,
        "wires": [
            [
                "bf9746bd8aceb0fa"
            ]
        ]
    },
    {
        "id": "c0efd85bb53d7b50",
        "type": "function",
        "z": "d8fa57a5ef9491a4",
        "name": "Потужність котла",
        "func": "//Потужність котла МВт\nconst T2 = msg.input.InputTESteam // Температура виходу (пари)\nconst T1 = msg.input.TEWaterInput // Температура входу (води на вході)\nconst FEWater = msg.input.InputFEWater// Витрата води\nlet Q = parseFloat((((T2 - T1) * FEWater) / 1000 * 1.16).toFixed(3)) // Формула рограхунку потужності (якщо прибрати множення на 1.16 то результат буде в ГКал)\nmsg.result4 = {\n    PowerSteamboiller: Q\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 120,
        "wires": [
            [
                "bf9746bd8aceb0fa"
            ]
        ]
    },
    {
        "id": "bf9746bd8aceb0fa",
        "type": "function",
        "z": "d8fa57a5ef9491a4",
        "name": "Формування об'єкту для IfluxDB",
        "func": "msg.data = { ...msg.toFix, ...msg.result1, ...msg.result2, ...msg.result3, ...msg.result4 };\nlet data ={\n  measurement: 'SteamBoiler',\n\n  fields: msg.data,\n  timestamp: new Date().getTime()\n}\n\nmsg.payload = {\n    bucket:'EnergyEfficientSteamBioler',\n    precision: 'ms',\n    data,\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1440,
        "y": 80,
        "wires": [
            [
                "6d0b7bc555595b1e",
                "38ddfe03c711a4c7"
            ]
        ]
    },
    {
        "id": "6d0b7bc555595b1e",
        "type": "Stackhero-InfluxDB-v2-write",
        "z": "d8fa57a5ef9491a4",
        "server": "2d94b6f010474707",
        "name": "InfluxDBwrite",
        "x": 1710,
        "y": 80,
        "wires": [
            [
                "db981e484a7ab8c0"
            ]
        ]
    },
    {
        "id": "38ddfe03c711a4c7",
        "type": "debug",
        "z": "d8fa57a5ef9491a4",
        "name": "debug 42",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1720,
        "y": 140,
        "wires": []
    },
    {
        "id": "efcefdcae68cbe07",
        "type": "inject",
        "z": "d8fa57a5ef9491a4",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 560,
        "wires": [
            [
                "c0f6db92f44e9798"
            ]
        ]
    },
    {
        "id": "921b30628919af55",
        "type": "debug",
        "z": "d8fa57a5ef9491a4",
        "name": "debug 43",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1100,
        "y": 240,
        "wires": []
    },
    {
        "id": "d4f7f2471b3b4f2a",
        "type": "influxdb in",
        "z": "d8fa57a5ef9491a4",
        "influxdb": "48659a7502deef5d",
        "name": "Flux запит",
        "query": "from(bucket: \"EnergyEfficientSteamBioler\")\n    |> range(start: -15m)\n    |> filter(fn: (r) => r._field == \"InputFEWater\" or r._field == \"InputFESteam\" or r._field == \"InputFEGaz\" or r._field == \"LoadSteamBoiller\" or r._field == \"KKD\")\n    |> group(columns: [\"_field\"])\n    |> aggregateWindow(every: 1m, fn: last, createEmpty: false)",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "cce5e39002b2a1a2",
        "x": 370,
        "y": 200,
        "wires": [
            [
                "d019624bdf872d89"
            ]
        ]
    },
    {
        "id": "3366a262a6042277",
        "type": "http in",
        "z": "d8fa57a5ef9491a4",
        "name": "",
        "url": "/DataPer1min",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 200,
        "wires": [
            [
                "d4f7f2471b3b4f2a"
            ]
        ]
    },
    {
        "id": "0dd1d9b90a3aedae",
        "type": "http response",
        "z": "d8fa57a5ef9491a4",
        "name": "Bubble.io",
        "statusCode": "",
        "headers": {},
        "x": 1100,
        "y": 200,
        "wires": []
    },
    {
        "id": "8868f5529cd357e9",
        "type": "debug",
        "z": "d8fa57a5ef9491a4",
        "name": "debug 44",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 580,
        "wires": []
    },
    {
        "id": "d019624bdf872d89",
        "type": "function",
        "z": "d8fa57a5ef9491a4",
        "name": "Обробка масивів та форм. вихідного повідомлення",
        "func": "//функція пошуку в масивах елементів с полями які містять ключі\nfunction filterAndMapData(field) {\n    return msg.payload\n        .filter(function (item) {\n            return item._field === field;\n        })\n        .map(function (item) {\n            return {\n                _value: item._value,\n                _field: item._field,\n                _time: item._time,\n                _timeNOW: new Date().toISOString(),\n            };\n        });\n}\n\n/*let inputFEWater = filterAndMapData(\"InputFEWater\");\nlet inputFESteam = filterAndMapData(\"InputFESteam\");\nlet inputFEGaz = filterAndMapData(\"InputFEGaz\");\nlet inputLoad = filterAndMapData(\"MfwMax\");\n*/\n\nmsg.payload = {\n    'FEWater': filterAndMapData(\"InputFEWater\"),\n    'FESteam': filterAndMapData(\"InputFESteam\"),\n    'FEGaz': filterAndMapData(\"InputFEGaz\"),\n    'Load': filterAndMapData(\"LoadSteamBoiller\")\n};\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 200,
        "wires": [
            [
                "0dd1d9b90a3aedae",
                "921b30628919af55"
            ]
        ]
    },
    {
        "id": "1bebf4e2a14e574b",
        "type": "debug",
        "z": "d8fa57a5ef9491a4",
        "name": "debug 46",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1100,
        "y": 320,
        "wires": []
    },
    {
        "id": "fcfc48c40b0c6dc1",
        "type": "http in",
        "z": "d8fa57a5ef9491a4",
        "name": "",
        "url": "/DataPer5min",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 280,
        "wires": [
            [
                "b45530adba740958"
            ]
        ]
    },
    {
        "id": "1aa31f79e08a0725",
        "type": "http response",
        "z": "d8fa57a5ef9491a4",
        "name": "Bubble.io",
        "statusCode": "",
        "headers": {},
        "x": 1100,
        "y": 280,
        "wires": []
    },
    {
        "id": "b45530adba740958",
        "type": "influxdb in",
        "z": "d8fa57a5ef9491a4",
        "influxdb": "48659a7502deef5d",
        "name": "Flux запит",
        "query": "from(bucket: \"EnergyEfficientSteamBioler\")\n    |> range(start: -1h)\n    |> filter(fn: (r) => r._field == \"InputFEWater\" or r._field == \"InputFESteam\" or r._field == \"InputFEGaz\" or r._field == \"LoadSteamBoiller\")\n    |> group(columns: [\"_field\"])\n    |> aggregateWindow(every: 5m, fn: last, createEmpty: false)",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "cce5e39002b2a1a2",
        "x": 370,
        "y": 280,
        "wires": [
            [
                "0721681016754134"
            ]
        ]
    },
    {
        "id": "0721681016754134",
        "type": "function",
        "z": "d8fa57a5ef9491a4",
        "name": "Обробка масивів та форм. вихідного повідомлення",
        "func": "//функція пошуку в масивах елементів с полями які містять ключі\nfunction filterAndMapData(field) {\n    return msg.payload\n        .filter(function (item) {\n            return item._field === field;\n        })\n        .map(function (item) {\n            return {\n                _value: item._value,\n                _field: item._field,\n                _time: item._time,\n                _timeNOW: new Date().toISOString(),\n            };\n        });\n}\n\nmsg.payload = {\n    'FEWater': filterAndMapData(\"InputFEWater\"),\n    'FESteam': filterAndMapData(\"InputFESteam\"),\n    'FEGaz': filterAndMapData(\"InputFEGaz\"),\n    'Load': filterAndMapData(\"LoadSteamBoiller\")\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 280,
        "wires": [
            [
                "1aa31f79e08a0725",
                "1bebf4e2a14e574b"
            ]
        ]
    },
    {
        "id": "8291ba581fc9d111",
        "type": "http in",
        "z": "d8fa57a5ef9491a4",
        "name": "",
        "url": "/DataPer1min",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 210,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "5d4b8e87ad051fb9",
        "type": "http response",
        "z": "d8fa57a5ef9491a4",
        "name": "Bubble.io",
        "statusCode": "",
        "headers": {},
        "x": 760,
        "y": 620,
        "wires": []
    },
    {
        "id": "e7383384e317c54e",
        "type": "function",
        "z": "d8fa57a5ef9491a4",
        "name": "Обробка масивів",
        "func": "//функція пошуку в масивах елементів с полями які містять ключі\nfunction filterAndMapData(field) {\n    return msg.payload\n        .filter(function (item) {\n            return item._field === field;\n        })\n        .map(function (item) {\n            return {\n                _value: item._value,\n                _field: item._field,\n                _time: item._time,\n                _timeNOW: new Date().toISOString(),\n            };\n        });\n}\n\nlet inputFEWater = filterAndMapData(\"InputFEWater\");\nlet inputFESteam = filterAndMapData(\"InputFESteam\");\nlet inputFEGaz = filterAndMapData(\"InputFEGaz\");\nlet inputLoad = filterAndMapData(\"MfwMax\");\n//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<Запис в глоба контекст>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>..\nmsg.payload = {\n    'FEWater': inputFEWater,\n    'FESteam': inputFESteam,\n    'FEGaz': inputFEGaz,\n    'Load': inputLoad\n};\n\nlet globalContext = global.get('globalContext') || {};\nObject.keys(msg.payload).forEach(key => {\n    if (msg.payload[key].length !== 0) {\n        globalContext.payload[key] = msg.payload[key];\n    }\n});\nglobal.set('globalContext', globalContext);\n\n\n\n// test>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\nfunction duplicateLastItem() {\n    const lastKey = Object.keys(msg.payload.FEWater).length - 1;\n    const lastItem = msg.payload.FEWater[lastKey];\n    const newKey = lastKey + 1;\n\n    msg.payload.FEWater[newKey] = { ...lastItem };\n    msg.payload.FEWater[newKey]._time = new Date().toISOString();\n    msg.payload.FEWater[newKey]._timeNOW = new Date().toISOString();\n}\n\nfunction removeFirstItemAndShift() {\n    const keys = Object.keys(msg.payload.FEWater);\n    \n    if (keys.length > 15) {\n        // Створюємо новий масив без першого елемента\n        const newFEWater = {};\n        for (let i = 1; i < keys.length; i++) {\n            newFEWater[i - 1] = msg.payload.FEWater[i];\n        }\n\n        // Замінюємо msg.payload.FEWater новим масивом\n        msg.payload.FEWater = newFEWater;\n    } else {\n        // Якщо елементів менше двох, просто видаляємо перший елемент\n        delete msg.payload.FEWater[keys[0]];\n    }\n}\n\n\n\nif (new Date().getTime() - new Date(inputFEWater[inputFEWater.length - 1]._time).getTime() > 60000)\n{\n  // Викликаємо функції\n  duplicateLastItem();\n  removeFirstItemAndShift(); \n}\n\n\n\n/*if (inputFEWater.length === 0 || inputFEWater[inputFEWater.length - 1]._timeN < new Date().toISOString()) {\n   // Викликаємо функції\nduplicateLastItem();\nremoveFirstItemAndShift(); \n}*/\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1590,
        "y": 960,
        "wires": [
            [
                "18b5bda2d3f8e137"
            ]
        ]
    },
    {
        "id": "c0f6db92f44e9798",
        "type": "function",
        "z": "d8fa57a5ef9491a4",
        "name": "function 11",
        "func": "\nmsg.payload = {\n    'Number': [\n        { 'val': 13, 'prop': 9, 'Date': new Date().toISOString() }, \n         {'val': 12, 'prop': 9, 'Date': new Date().toISOString() },\n        { 'val': 12, 'prop': 9, 'Date': new Date().toISOString() },\n    ],\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 620,
        "wires": [
            [
                "43b275bcaf3e185d"
            ]
        ]
    },
    {
        "id": "8a53cf9476c61e21",
        "type": "inject",
        "z": "d8fa57a5ef9491a4",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 680,
        "wires": [
            [
                "3a02413971cedd3d"
            ]
        ]
    },
    {
        "id": "105627095a916157",
        "type": "debug",
        "z": "d8fa57a5ef9491a4",
        "name": "debug 47",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1560,
        "y": 560,
        "wires": []
    },
    {
        "id": "3a02413971cedd3d",
        "type": "function",
        "z": "d8fa57a5ef9491a4",
        "name": "function 12",
        "func": "// Ваш початковий об'єкт\nmsg.payload = {\n    'Number': {\n        0: { 'val': 12, 'prop': 9, 'Date': new Date().toISOString() }, \n        1: { 'val': 12, 'prop': 9, 'Date': new Date().toISOString() },\n        2: { 'val': 10, 'prop': 5, 'Date': new Date().toISOString() },\n    }\n};\n\n// Додаткова функція для копіювання та додавання останнього елемента\nfunction duplicateLastItem() {\n    const lastKey = Object.keys(msg.payload.Number).length - 1;\n    const lastItem = msg.payload.Number[lastKey];\n    const newKey = lastKey + 1;\n\n    msg.payload.Number[newKey] = { ...lastItem };\n    msg.payload.Number[newKey].Date = new Date().toISOString();\n}\n\n// Логіка для видалення першого елемента та зсуву інших елементів\nfunction removeFirstItemAndShift() {\n    const keys = Object.keys(msg.payload.Number);\n    \n    if (keys.length > 3) {\n        // Знаходимо перший ключ об'єкта та видаляємо його\n        const firstKey = keys[0];\n        delete msg.payload.Number[firstKey];\n\n        // Зсуваємо індекси інших елементів\n        for (let i = 0; i < keys.length - 1; i++) {\n            msg.payload.Number[i] = msg.payload.Number[i + 1];\n        }\n\n        // Видаляємо останній (зайвий) елемент, щоб уникнути дублювання\n        delete msg.payload.Number[keys.length - 1];\n    }\n}\n\n// Викликаємо функції\nduplicateLastItem();\nremoveFirstItemAndShift();\n\n// Повертаємо змінений об'єкт\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "18b5bda2d3f8e137",
        "type": "debug",
        "z": "d8fa57a5ef9491a4",
        "name": "debug 48",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1760,
        "y": 960,
        "wires": []
    },
    {
        "id": "b8aab50a663e6c15",
        "type": "influxdb in",
        "z": "d8fa57a5ef9491a4",
        "influxdb": "48659a7502deef5d",
        "name": "Flux запит",
        "query": "from(bucket: \"EnergyEfficientSteamBioler\")\n    |> range(start: -8h)\n    |> filter(fn: (r) => r._field == \"InputFEWater\" or r._field == \"InputFESteam\" or r._field == \"InputFEGaz\" or r._field == \"MfwMax\")\n    |> group(columns: [\"_field\"])\n    |> limit(n: 15)\n    ",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "cce5e39002b2a1a2",
        "x": 850,
        "y": 720,
        "wires": [
            [
                "633bf58b7b3813af"
            ]
        ]
    },
    {
        "id": "633bf58b7b3813af",
        "type": "debug",
        "z": "d8fa57a5ef9491a4",
        "name": "debug 49",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1020,
        "y": 720,
        "wires": []
    },
    {
        "id": "43b275bcaf3e185d",
        "type": "json",
        "z": "d8fa57a5ef9491a4",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 590,
        "y": 620,
        "wires": [
            [
                "5d4b8e87ad051fb9",
                "8868f5529cd357e9"
            ]
        ]
    },
    {
        "id": "4df853c91f192aa4",
        "type": "function",
        "z": "d8fa57a5ef9491a4",
        "name": "Повне енергоспоживання",
        "func": "const Mi = msg.input.QGaz * msg.input.InputFEGaz //теплота згоряння Газу в кВт/год\nconst Ri = msg.result1.KKD // ККД котла\nconst PQ = msg.input.InputFESteam// Витрата води\nlet e = parseFloat(((Mi * Ri) / PQ) .toFixed(2))// повне енергоспоживання в кВт/т\nmsg.result2 = {\n    FullEnergyConsume: e\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 40,
        "wires": [
            [
                "bf9746bd8aceb0fa"
            ]
        ]
    },
    {
        "id": "2665b1c5eb29bb56",
        "type": "function",
        "z": "d8fa57a5ef9491a4",
        "name": "кореляція тест",
        "func": "// Приклад введення даних - масив масивів (кожен масив представляє вектор даних)\nconst data = [\n  [1, 2, 3, 4, 5],\n  [5, 4, 3, 2, 1],\n  [2, 3, 1, 5, 4],\n  [4, 5, 2, 1, 3]\n];\n\n// Функція для обчислення кореляційної матриці\nfunction calculateCorrelationMatrix(data) {\n  const rows = data.length;\n  const cols = data[0].length;\n\n  // Створюємо матрицю кореляції та заповнюємо її нулями\n  const correlationMatrix = Array.from({ length: cols }, () => Array(cols).fill(0));\n\n  // Обчислюємо кореляцію між кожною парою стовпців\n  for (let i = 0; i < cols; i++) {\n    for (let j = i; j < cols; j++) {\n      // Обчислення коефіцієнту кореляції Пірсона\n      let sumX = 0, sumY = 0, sumXY = 0, sumX2 = 0, sumY2 = 0;\n\n      for (let k = 0; k < rows; k++) {\n        sumX += data[k][i];\n        sumY += data[k][j];\n        sumXY += data[k][i] * data[k][j];\n        sumX2 += data[k][i] ** 2;\n        sumY2 += data[k][j] ** 2;\n      }\n\n      const numerator = (rows * sumXY) - (sumX * sumY);\n      const denominator = Math.sqrt((rows * sumX2 - sumX ** 2) * (rows * sumY2 - sumY ** 2));\n\n      // Коефіцієнт кореляції від -1 до 1\n      const correlation = denominator !== 0 ? numerator / denominator : 0;\n\n      correlationMatrix[i][j] = correlation;\n      correlationMatrix[j][i] = correlation; // матриця кореляції симетрична\n    }\n  }\n\n  return correlationMatrix;\n}\n\n// Виведемо результат у консоль\nconst result = calculateCorrelationMatrix(data);\nmsg.payload = result\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1380,
        "y": 560,
        "wires": [
            [
                "105627095a916157"
            ]
        ]
    },
    {
        "id": "b2a637258405ac64",
        "type": "inject",
        "z": "d8fa57a5ef9491a4",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1180,
        "y": 560,
        "wires": [
            [
                "2665b1c5eb29bb56"
            ]
        ]
    }
]